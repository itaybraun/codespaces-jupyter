database_connection:
  host: localhost
  port: 5432
  user: postgres
  password: your_password_here

operations:
  - name: show_db_sizes
    type: data_retrieval
    description: Display sizes of all PostgreSQL databases on the server
    sql_command: |
      SELECT 
        datname AS database_name,
        pg_database_size(datname) AS size_in_bytes
      FROM 
        pg_database
      WHERE 
        datistemplate = false
      ORDER BY 
        size_in_bytes DESC;
    parameters: []
    visualization:
      type: pie_chart
      settings:
        labels: database_name
        values: size_in_bytes
        title: Database Sizes
        colormap: Set3

  - name: show_table_sizes
    type: data_retrieval
    description: Display sizes of all tables in the current database
    sql_command: |
      SELECT 
        schemaname || '.' || relname AS table_name,
        pg_total_relation_size(schemaname || '.' || relname) AS total_size_bytes
      FROM 
        pg_stat_user_tables
      ORDER BY 
        total_size_bytes DESC;
    parameters:
      - name: database
        type: string
        description: Name of the database to analyze
    visualization:
      type: data_table
      settings:
        columns:
          - table_name
          - total_size_bytes

  - name: show_pg_config
    type: data_retrieval
    description: Display PostgreSQL configuration parameters matching a search expression
    sql_command: |
      SELECT 
        name, 
        setting, 
        unit, 
        context, 
        short_desc
      FROM 
        pg_settings
      WHERE 
        name ILIKE '%' || :search_expression || '%'
        OR setting ILIKE '%' || :search_expression || '%'
        OR short_desc ILIKE '%' || :search_expression || '%'
      ORDER BY 
        name;
    parameters:
      - name: search_expression
        type: string
        description: Search expression to filter configuration parameters
    visualization:
      type: data_table
      settings:
        columns:
          - name
          - setting
          - unit
          - context
          - short_desc

  - name: create_new_db_and_objects
    type: create_objects
    description: Create a new database with tables and cron jobs
    script: create_db_objects.py
    parameters:
      - name: db_name
        type: string
        description: Name of the new database to create
      - name: tables
        type: list
        description: List of tables to create in the new database
      - name: cron_jobs
        type: list
        description: List of cron jobs to set up
    visualization:
      type: text_output
      settings:
        display: execution_log

  - name: show_pg_cron_tables_overview
    type: data_retrieval
    description: Display important metadata about the tables of pg_cron
    sql_command: |
      SELECT 
        (SELECT COUNT(*) FROM cron.job) AS number_of_rows_in_cron_job,
        (SELECT COUNT(*) FROM cron.job_run_details) AS number_of_rows_in_cron_job_run_details,
        (SELECT MIN(start_time) FROM cron.job_run_details) AS oldest_run_date;
    
  - name: show_pg_cron_jobs_history_overview
    type: data_retrieval
    description: Display an overview about the history of each job, such as how many times it run in the last X days, avg duration, max duration
    sql_command: |
      SELECT
        j.jobid,
        j.jobname,
        COUNT(jrd.*) AS total_runs,
        SUM(CASE WHEN jrd.status = 'succeeded' THEN 1 ELSE 0 END) AS success_count,
        SUM(CASE WHEN jrd.status = 'failed' THEN 1 ELSE 0 END) AS failure_count,
        ROUND((SUM(CASE WHEN jrd.status = 'succeeded' THEN 1 ELSE 0 END)::DECIMAL / COUNT(jrd.*)) * 100, 2) AS success_percentage,
        ROUND((SUM(CASE WHEN jrd.status = 'failed' THEN 1 ELSE 0 END)::DECIMAL / COUNT(jrd.*)) * 100, 2) AS failure_percentage
      FROM
          cron.job j
      JOIN
          cron.job_run_details jrd ON j.jobid = jrd.jobid
      WHERE
          jrd.start_time >= CURRENT_DATE - INTERVAL '30 days'
      GROUP BY
          j.jobid, j.jobname
      ORDER BY
          j.jobid;